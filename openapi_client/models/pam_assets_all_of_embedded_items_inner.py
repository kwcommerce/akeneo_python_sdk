# coding: utf-8

"""
    Akeneo PIM REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.pam_assets_all_of_embedded_items_inner_all_of_reference_files_inner import PAMAssetsAllOfEmbeddedItemsInnerAllOfReferenceFilesInner
from openapi_client.models.pam_assets_all_of_embedded_items_inner_all_of_variation_files_inner import PAMAssetsAllOfEmbeddedItemsInnerAllOfVariationFilesInner
from openapi_client.models.products_all_of_embedded_items_inner_all_of_links import ProductsAllOfEmbeddedItemsInnerAllOfLinks
from typing import Optional, Set
from typing_extensions import Self

class PAMAssetsAllOfEmbeddedItemsInner(BaseModel):
    """
    PAMAssetsAllOfEmbeddedItemsInner
    """ # noqa: E501
    links: Optional[ProductsAllOfEmbeddedItemsInnerAllOfLinks] = Field(default=None, alias="_links")
    code: StrictStr = Field(description="PAM asset code")
    categories: Optional[List[StrictStr]] = Field(default=None, description="Codes of the PAM asset categories in which the asset is classified")
    description: Optional[StrictStr] = Field(default=None, description="Description of the PAM asset")
    localizable: Optional[StrictBool] = Field(default=False, description="Whether the asset is localized or not, meaning if you want to have different reference files for each of your locale")
    tags: Optional[List[StrictStr]] = Field(default=None, description="Tags of the PAM asset")
    end_of_use: Optional[StrictStr] = Field(default=None, description="Date on which the PAM asset expire")
    variation_files: Optional[List[PAMAssetsAllOfEmbeddedItemsInnerAllOfVariationFilesInner]] = Field(default=None, description="Variations of the PAM asset")
    reference_files: Optional[List[PAMAssetsAllOfEmbeddedItemsInnerAllOfReferenceFilesInner]] = Field(default=None, description="Reference files of the PAM asset")
    __properties: ClassVar[List[str]] = ["_links", "code", "categories", "description", "localizable", "tags", "end_of_use", "variation_files", "reference_files"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PAMAssetsAllOfEmbeddedItemsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['_links'] = self.links.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in variation_files (list)
        _items = []
        if self.variation_files:
            for _item in self.variation_files:
                if _item:
                    _items.append(_item.to_dict())
            _dict['variation_files'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in reference_files (list)
        _items = []
        if self.reference_files:
            for _item in self.reference_files:
                if _item:
                    _items.append(_item.to_dict())
            _dict['reference_files'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PAMAssetsAllOfEmbeddedItemsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_links": ProductsAllOfEmbeddedItemsInnerAllOfLinks.from_dict(obj["_links"]) if obj.get("_links") is not None else None,
            "code": obj.get("code"),
            "categories": obj.get("categories"),
            "description": obj.get("description"),
            "localizable": obj.get("localizable") if obj.get("localizable") is not None else False,
            "tags": obj.get("tags"),
            "end_of_use": obj.get("end_of_use"),
            "variation_files": [PAMAssetsAllOfEmbeddedItemsInnerAllOfVariationFilesInner.from_dict(_item) for _item in obj["variation_files"]] if obj.get("variation_files") is not None else None,
            "reference_files": [PAMAssetsAllOfEmbeddedItemsInnerAllOfReferenceFilesInner.from_dict(_item) for _item in obj["reference_files"]] if obj.get("reference_files") is not None else None
        })
        return _obj


